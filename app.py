#!flask/bin/python
#from urllib.parse import uses_relative
from flask import Flask, jsonify, abort, make_response, request, json, send_from_directory
import telebot
#from telebot import types
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from requests import get
import src.modules # –∏–º–ø–æ—Ä—Ç –Ω–∞—à–µ–≥–æ –º–æ–¥—É–ª—è 
from dotenv import load_dotenv
import os
from time import sleep
import threading
from logging.handlers import RotatingFileHandler
import logging

load_dotenv()

app = Flask(__name__)
app.config['JSON_SORT_KEYS'] = False

# —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç 
if not os.path.exists('logs'):
    try:
        os.mkdir('logs')
    except Exception as my_error:
        print(f"–û—à–∏–±–∫–∞: {my_error}") #debug
    
file_handler = RotatingFileHandler(
    'logs/taxi_calls.log', maxBytes=5242880,
    backupCount=10
)
file_handler.setFormatter(logging.Formatter(
    '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]',
    datefmt='%d-%m-%Y %H:%M:%S'
    )
)
file_handler.setLevel(logging.INFO)
app.logger.addHandler(file_handler) 
app.logger.setLevel(logging.INFO)

# # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(
#     filename='logs/myapi.log', 
#     level=logging.INFO, 
#     format=f'%(asctime)s %(levelname)s %(name)s %(threadName)s : %(message)s',
#     datefmt='%d-%m-%Y %H:%M:%S'
# )

#–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
api_tokken = os.getenv('api_tokken')
app_debug = os.getenv('debug_on')
users_id_all = os.getenv('users_id')
users_id = users_id_all.split(",")
my_host = os.getenv('my_host')
my_port = os.getenv('my_port')
bot_tokken = os.getenv('bot_tokken')
admins_id_all = os.getenv('admins_id')
admins_id = admins_id_all.split(",")

bot_tokken = os.getenv('bot_tokken') #–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
Bot = telebot.TeleBot(bot_tokken) #–Ω–∞–∑–Ω–∞—á–∞–µ–º —Ç–æ–∫–∫–µ–Ω –≤ —Ç–µ–ª–µ–±–æ—Ç

@app.route('/favicon.ico')
def favicon():
    #print (app.root_path) #debug
    return send_from_directory(os.path.join(app.root_path, 'static'),
                            'favicon.ico', mimetype='image/vnd.microsoft.icon')

@app.route('/api/test')
def index():
    return make_response(jsonify(
                    ok=True
                ), 200)

#GET –º—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 
@app.route('/api/call/<tokken>', methods=['POST']) #—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç —á—Ç–æ –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç 
def connect(tokken):
    request_data = request.get_json()
    number = None
    status = None
    
    if app_debug == "1":
        #print (json.dumps(request_data, indent=2, ensure_ascii = False)) #debug
        app.logger.info(f"[API]\nrequest_data: {json.dumps(request_data, indent=2, ensure_ascii = False)}")

    if request_data:
        #print (request_data) #debug
        if 'number' in request_data:
            number = request_data['number']
        if 'status' in request_data:
            if request_data['status'] == "1":
                status = "‚úÖ"
            else:
                status = "‚ùå"

    #–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è 
    if tokken == api_tokken:
        #–≤–æ–∑–≤—Ä–∞—à–∞–µ–º —á—Ç–æ –≤—Å–µ –æ–∫
        if app_debug == "1":
            answer = { 'ok':True, 'tokken': 'tokken accepted'}
            app.logger.info(f'[API]\nanswer: \n{json.dumps(answer, indent=2, ensure_ascii = False)}')
        #—É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        notifications(number, status) 
        #–≤–æ–∑–≤—Ä–∞—à–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return make_response(jsonify(
                                ok=True,
                                tokken="tokken accepted"
                            ), 200) 
    else:
        if app_debug == "1":
            answer = { 'ok':False, 'tokken': 'the token is not correct'}
            app.logger.info(f'[API]\ntokken: {tokken}\nanswer: \n{json.dumps(answer, indent=2, ensure_ascii = False)}')
        return make_response(jsonify(
                            ok=False,
                            tokken="the token is not correct"
                            ), 404)        
    

def notifications(number, status):
    """–£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    my_text = (
            f"{status} –ù–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫\n<b>üì± {number}\n</b>"
        )
    #print (my_text) #debug
    for id in users_id:
        #print (id) #debug
        try:
            Bot.send_message(id, my_text, parse_mode="HTML")
            if app_debug == "1":
                app.logger.info(f'[BOT] C–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
        except Exception as my_error:
            print(f"–û—à–∏–±–∫–∞: {my_error}") #debug 
            if app_debug == "1":
                app.logger.error(f'[BOT] –û—à–∏–±–∫–∞: {my_error}')

@app.errorhandler(404)
def not_found(error):
    return make_response(jsonify({'error': 'Not found'}), 404)

# -----------------------------------------------------------------
Bot = telebot.TeleBot(bot_tokken) #–Ω–∞–∑–Ω–∞—á–∞–µ–º —Ç–æ–∫–∫–µ–Ω –≤ —Ç–µ–ª–µ–±–æ—Ç
Bot.delete_my_commands(scope=None, language_code=None)
Bot.set_my_commands(
    commands=[
        telebot.types.BotCommand("start", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        telebot.types.BotCommand("id", "üë§ –¢–µ–ª–µ–≥—Ä–∞–º ID"),
        # telebot.types.BotCommand("test", "–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
    ],
    # scope=telebot.types.BotCommandScopeChat(12345678)  #use for personal command for users
    # scope=telebot.types.BotCommandScopeAllPrivateChats()  #use for all private chats
)
# -----------------------------------------------------------------

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start
@Bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è '/start' """
    user_id = message.from_user.id
    # print (user_id) #debug
    # print (users_id) #debug
    bot_text = "–ü—Ä–∏–≤–µ—Ç ü§ù"
    for id in users_id:
        if str(user_id) == str(id):
            bot_text = "–ü—Ä–∏–≤–µ—Ç ü§ù\n‚úÖ–¢–µ–ø–µ—Ä—å —è –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å —Ç–µ–±—è –æ –∑–≤–æ–Ω–∫–∞—Ö –Ω–∞ –Ω–æ–º–µ—Ä taxi"
        else:
            bot_text = "–ü—Ä–∏–≤–µ—Ç ü§ù\n‚ùå–£ —Ç–µ–±—è –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞.\n–û–±—Ä–∞—Ç–∏—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫ @RasulovDD"
        
        try:
            Bot.send_message(id, bot_text)
            if app_debug == "1":
                app.logger.info(f'[BOT] [user_id:{id}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
        except Exception as my_error:
            print(f"–û—à–∏–±–∫–∞: {my_error}") #debug 
            if app_debug == "1":
                app.logger.error(f'[BOT] [user_id:{id}] –û—à–∏–±–∫–∞: {my_error}')
        



@Bot.message_handler(commands=['id'])
def send_id(message):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è '/id'. """
    if message.chat.type != 'private':
        Bot.send_message(message.chat.id, f"ID —á–∞—Ç–∞: {message.chat.id}")
    else:
        Bot.send_message(message.from_user.id, f"–í–∞—à ID: {message.from_user.id}")

def flask_thread():
    #–∑–∞–ø—É—Å–∫–∞–µ–º BotAPI
    app.logger.info('[API] startup')
    app.run(host=my_host, port=my_port, debug=False) 

def bot_thread():
    try:
        app.logger.info('[BOT] startup')
        #–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–µ–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –∞–¥–º–∏–Ω—É
        Bot.send_message(2964812, "Taxi Calls API –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ bot02.wilgood.ru –∑–∞–ø—É—Å—Ç–∏–ª—Å—è") 
        #–ù–µ–ø—Ä–µ–∫—Ä–∞—â–∞—é—â–∞—è—Å—è –ø—Ä–æ—Å–ª—É—à–∫–∞ –Ω–∞—à–∏—Ö —á–∞—Ç–æ–≤
        Bot.polling(none_stop=True, interval=0,  timeout=120) 
    except Exception as my_bot_error:
        app.logger.info(f'[BOT] startup, –û—à–∏–±–∫–∞: {my_bot_error}')
        app.logger.info(f'[BOT] Bot —É–ø–∞–ª –æ—Ç–∂–∞–ª—Å—è –∏ –≤—Å—Ç–∞–ª')
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        Bot.send_message(admins_id, f"–û—à–∏–±–∫–∞: {my_bot_error}")
        Bot.send_message(admins_id, "Bot —É–ø–∞–ª –æ—Ç–∂–∞–ª—Å—è –∏ –≤—Å—Ç–∞–ª") # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        sleep(20)

# –ó–∞–ø—É—Å–∫ APP
if __name__ == '__main__':
    flask_app = threading.Thread(target=flask_thread)
    bot_app = threading.Thread(target=bot_thread)

    flask_app.start()
    bot_app.start()

    flask_app.join()
    bot_app.join()